import optparse

from IPy import IP as IPTEST
from scapy.all import *

ttlValues = {}
THRESH = 5  # Network Fault Tolerance


def checkTTL(ipsrc, ttl):
    if IPTEST(ipsrc).iptype() == 'PRIVATE':  # confirms it is external domain
        return

    if not ttlValues.has_key(ipsrc):
        pkt = sr1(IP(dst=ipsrc) / ICMP(), retry=0, timeout=1,
                  verbose=0)  # sr is used over send when we want to track the response. sr1 indicates we only want first answer.
    ttlValues[ipsrc] = pkt.ttl
    if abs(int(ttl) - int(ttlValues[ipsrc])) > THRESH:
        print '\n[!] Detected Possible Spoofed Packet From: ' + ipsrc
    print '[!] TTL: ' + ttl + ', Actual TTL: ' \
          + str(ttlValues[ipsrc]) + " IP: " + ipsrc


def testTTL(pkt):
    layers = []
    counter = 0
    while True:
        layer = pkt.getlayer(counter)
        if (layer != None):
            layers.append(layer.name)
        else:
            break
        counter += 1
    try:
        if pkt.haslayer(IP):
            ipsrc = pkt.getlayer(IP).src
            print "[*] Layers are: --> ", layers
            ttl = str(pkt.ttl)
            checkTTL(ipsrc, ttl)
    except:
        pass


def main():
    parser = optparse.OptionParser("usage%prog " + \
                                   "-i<interface>")
    parser.add_option('-i', dest='iface', type='string', \
                      help='specify network interface')
    (options, args) = parser.parse_args()
    if options.iface == None:
        conf.iface = 'wlan0'
    else:
        conf.iface = options.iface

    sniff(prn=testTTL, store=0)  # Sniffs all trafic. prn param specifies function to apply to each packet


if __name__ == '__main__':
    main()
